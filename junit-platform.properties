#Configuration parameters to execute all tests in parallel
junit.jupiter.execution.parallel.enabled = true
#junit.jupiter.execution.parallel.mode.default = concurrent
#The default execution mode is applied to all nodes of the test tree with a few notable exceptions, namely test classes that use the Lifecycle.PER_CLASS mode or a MethodOrderer (except for MethodOrderer.Random). In the former case, test authors have to ensure that the test class is thread-safe; in the latter, concurrent execution might conflict with the configured execution order. Thus, in both cases, test methods in such test classes are only executed concurrently if the @Execution(CONCURRENT) annotation is present on the test class or method.
#
#All nodes of the test tree that are configured with the CONCURRENT execution mode will be executed fully in parallel according to the provided configuration while observing the declarative synchronization mechanism. Please note that Capturing Standard Output/Error needs to be enabled separately.
#
#In addition, you can configure the default execution mode for top-level classes by setting the junit.jupiter.execution.parallel.mode.classes.default configuration parameter. By combining both configuration parameters, you can configure classes to run in parallel but their methods in the same thread:
#
#Configuration parameters to execute top-level classes in parallel but methods in same thread
#junit.jupiter.execution.parallel.enabled = true
#junit.jupiter.execution.parallel.mode.default = same_thread
#junit.jupiter.execution.parallel.mode.classes.default = concurrent
#The opposite combination will run all methods within one class in parallel, but top-level classes will run sequentially:
#
#Configuration parameters to execute top-level classes sequentially but their methods in parallel
#junit.jupiter.execution.parallel.enabled = true
#junit.jupiter.execution.parallel.mode.default = concurrent
#junit.jupiter.execution.parallel.mode.classes.default = same_thread